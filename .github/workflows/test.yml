name: 🧪 测试工作流

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 每天凌晨2点运行完整测试
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.10'
  NODE_VERSION: '18'

jobs:
  # 快速检查 - 并行运行
  quick-checks:
    name: 🚀 快速检查
    runs-on: ubuntu-latest
    strategy:
      matrix:
        check: [lint, type-check, security]
    steps:
    - uses: actions/checkout@v4
    
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install flake8 mypy bandit safety
    
    - name: 代码风格检查
      if: matrix.check == 'lint'
      run: |
        flake8 backend --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 backend --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: 类型检查
      if: matrix.check == 'type-check'
      run: |
        mypy backend --ignore-missing-imports --no-strict-optional
    
    - name: 安全检查
      if: matrix.check == 'security'
      run: |
        bandit -r backend -f json -o security-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: 上传安全报告
      if: matrix.check == 'security'
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: '*-report.json'

  # 冒烟测试 - 最快的验证
  smoke-tests:
    name: 💨 冒烟测试
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_alpha
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - uses: actions/checkout@v4
    
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
    
    - name: 等待MySQL就绪
      run: |
        until mysqladmin ping -h"127.0.0.1" -P3306 -uroot -proot --silent; do
          echo 'waiting for mysql...'
          sleep 2
        done
    
    - name: 运行冒烟测试
      env:
        DATABASE_URL: mysql://root:root@127.0.0.1:3306/test_alpha
        DJANGO_SETTINGS_MODULE: tests.test_settings_mysql
      run: |
        cd ${{ github.workspace }}
        python tests/test_runner_optimized.py --level smoke --verbose

  # 单元测试 - 核心功能测试
  unit-tests:
    name: 🔬 单元测试
    runs-on: ubuntu-latest
    needs: smoke-tests
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_alpha
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - uses: actions/checkout@v4
    
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest-cov pytest-xdist
    
    - name: 等待MySQL就绪
      run: |
        until mysqladmin ping -h"127.0.0.1" -P3306 -uroot -proot --silent; do
          echo 'waiting for mysql...'
          sleep 2
        done
    
    - name: 运行单元测试
      env:
        DATABASE_URL: mysql://root:root@127.0.0.1:3306/test_alpha
        DJANGO_SETTINGS_MODULE: tests.test_settings_mysql
      run: |
        cd ${{ github.workspace }}
        python tests/test_runner_optimized.py --level fast --parallel --coverage --verbose
    
    - name: 生成测试报告
      if: always()
      run: |
        cd ${{ github.workspace }}
        python -c "
        from tests.utils.test_report_generator import generate_test_report
        import os
        if os.path.exists('tests/reports/junit.xml'):
            generate_test_report('tests/reports/junit.xml', 'tests/reports')
        "
    
    - name: 上传测试报告
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-reports
        path: tests/reports/
    
    - name: 上传覆盖率报告
      if: always()
      uses: codecov/codecov-action@v3
      with:
        file: tests/coverage_html/coverage.xml
        flags: backend
        name: backend-coverage

  # 前端测试
  frontend-tests:
    name: 🎨 前端测试
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: 设置Node.js环境
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: 安装前端依赖
      run: |
        cd frontend
        npm ci
    
    - name: 运行前端测试
      run: |
        cd frontend
        npm run test:unit
        npm run test:e2e:headless
    
    - name: 构建前端
      run: |
        cd frontend
        npm run build
    
    - name: 上传构建产物
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist/

  # 集成测试 - 完整功能测试
  integration-tests:
    name: 🔗 集成测试
    runs-on: ubuntu-latest
    needs: [unit-tests, frontend-tests]
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_alpha
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - uses: actions/checkout@v4
    
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 下载前端构建产物
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist/
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
    
    - name: 等待服务就绪
      run: |
        until mysqladmin ping -h"127.0.0.1" -P3306 -uroot -proot --silent; do
          echo 'waiting for mysql...'
          sleep 2
        done
        until redis-cli -h 127.0.0.1 -p 6379 ping | grep -q PONG; do
          echo 'waiting for redis...'
          sleep 2
        done
    
    - name: 运行数据库迁移
      env:
        DATABASE_URL: mysql://root:root@127.0.0.1:3306/test_alpha
        REDIS_URL: redis://127.0.0.1:6379/0
        DJANGO_SETTINGS_MODULE: alpha.settings
      run: |
        cd backend
        python manage.py migrate
    
    - name: 运行集成测试
      env:
        DATABASE_URL: mysql://root:root@127.0.0.1:3306/test_alpha
        REDIS_URL: redis://127.0.0.1:6379/0
        DJANGO_SETTINGS_MODULE: tests.test_settings_mysql
      run: |
        cd ${{ github.workspace }}
        python tests/test_runner_optimized.py --level regression --verbose

  # 性能测试
  performance-tests:
    name: ⚡ 性能测试
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf]')
    needs: integration-tests
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_alpha
        ports:
          - 3306:3306

    steps:
    - uses: actions/checkout@v4
    
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install locust
    
    - name: 运行性能测试
      env:
        DATABASE_URL: mysql://root:root@127.0.0.1:3306/test_alpha
        DJANGO_SETTINGS_MODULE: tests.test_settings_mysql
      run: |
        cd ${{ github.workspace }}
        python tests/test_runner_optimized.py --level performance --verbose
    
    - name: 上传性能报告
      uses: actions/upload-artifact@v3
      with:
        name: performance-reports
        path: tests/reports/performance/

  # 部署到测试环境
  deploy-staging:
    name: 🚀 部署到测试环境
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    needs: [integration-tests]
    environment:
      name: staging
      url: https://alpha-staging.example.com
    
    steps:
    - uses: actions/checkout@v4
    
    - name: 下载前端构建产物
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist/
    
    - name: 部署到测试环境
      run: |
        echo "🚀 部署到测试环境..."
        # 这里添加实际的部署脚本
        echo "✅ 部署完成"

  # 部署到生产环境
  deploy-production:
    name: 🌟 部署到生产环境
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [integration-tests]
    environment:
      name: production
      url: https://alpha.example.com
    
    steps:
    - uses: actions/checkout@v4
    
    - name: 下载前端构建产物
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist/
    
    - name: 部署到生产环境
      run: |
        echo "🌟 部署到生产环境..."
        # 这里添加实际的部署脚本
        echo "✅ 部署完成"

  # 测试结果通知
  notify:
    name: 📢 测试结果通知
    runs-on: ubuntu-latest
    if: always()
    needs: [quick-checks, smoke-tests, unit-tests, frontend-tests, integration-tests]
    
    steps:
    - name: 计算测试结果
      id: test-result
      run: |
        if [[ "${{ needs.smoke-tests.result }}" == "success" && 
              "${{ needs.unit-tests.result }}" == "success" && 
              "${{ needs.frontend-tests.result }}" == "success" && 
              "${{ needs.integration-tests.result }}" == "success" ]]; then
          echo "result=success" >> $GITHUB_OUTPUT
          echo "message=✅ 所有测试通过！" >> $GITHUB_OUTPUT
        else
          echo "result=failure" >> $GITHUB_OUTPUT
          echo "message=❌ 部分测试失败，请检查详情。" >> $GITHUB_OUTPUT
        fi
    
    - name: 发送通知
      if: github.event_name == 'push'
      run: |
        echo "📢 测试结果: ${{ steps.test-result.outputs.message }}"
        echo "🔗 查看详情: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        # 这里可以添加实际的通知逻辑，如发送到Slack、企业微信等