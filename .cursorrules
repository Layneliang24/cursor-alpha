# Cursor AI 项目规则（团队共识）

- 输出语言：简体中文；回复力求简洁明了。
- Markdown 使用：仅在必要处使用；文件/目录/函数/类名用反引号格式化；代码片段使用合适语言标注的代码块；避免整段全文包裹在同一代码块。
- 终端命令规范（Windows 环境）：
  - 使用绝对路径执行脚本或切换目录。
  - 禁止使用 && 串联多个命令；按步骤分行执行。
  - 尽量避免使用无法交互的命令终端（例如 python 交互式 shell）；为可能交互的命令添加非交互参数。
  - 命令示例默认以 Git Bash 语法给出；优先使用路径：C:\\LAYNESOFTWARE\\Git\\bin\\bash.exe。
- 后端 API 约定：所有后端接口统一前缀为 api/v1/...

- 开发与变更策略：
  - 以不影响已实现功能为前提，遵循小步迭代与最小化变更原则；必要时采用增量提交和特性分支。
  - 变更前先理解现有代码与依赖，避免盲目试错式改动。

- 测试规范：
  - 修复 Bug 或新增功能必须配套单元测试与集成测试，遵循“修复 → 测试 → 验证”的流程。
  - 所有测试用例放入 tests/ 目录相应子目录中，测试执行后需保留测试用例。

- 文档规范：
  - 遵循 docs/DOCUMENTATION_STANDARDS.md 的书写规范。
  - 新功能指南更新至 docs/GUIDE.md；新的待办整理到 docs/TODO.md（若已有类似条目，请修改原条目而非重复新增）。
  - 每次修复 Bug，需要在 docs/FAQ.md 中记录问题与最终解决方案，沉淀经验。
  - 不随意新增新的文档，尽可能归纳到现有文档体系中。

- Debug 规范：
  - 先建立明确的排查步骤与目标，逐步验证假设；补充必要日志以支撑定位；避免拍脑袋式尝试。

- 目录边界与审慎变更：
  - 允许变更：业务代码、测试代码、与当前任务直接相关的配置。
  - 谨慎变更：部署脚本、CI/CD 配置、K8s 清单等基础设施文件；如需修改，先评估影响并补充相应测试与回滚方案。

- 终端与服务管理：
  - 不自动启动前端服务；如需启动，由开发者手动控制本地进程。

- 安全与隐私：
  - 不泄露密钥、Token、第三方凭据或 .env 内容；示例中使用占位符（如 <YOUR_TOKEN>）。

- 提交信息规范：
  - 使用清晰的提交类型前缀（如 feat/fix/docs/test/chore/refactor）。
  - 提交信息简要概述变更目的与影响，必要时附带范围说明。

- 回答期望：
  - 遵循本规则生成建议、代码与命令；在存在多种可选方案时，优先选择影响面小、风险低且易于回滚的方案。


