# Cursor AI 项目规则（团队共识）

- 对话规范：
  - 回答规范：每次对话，请标注是由哪个模型回答的，并给出真实模型名称。
  - 输出语言：简体中文；回复力求简洁明了，节约token。
  - 我的模型使用偏好：Claude-4-sonnet

- 行动规范：
  - 在开始工作前，先阅读docs/README.md，了解项目概览、项目结构、项目依赖、项目配置、项目运行、项目测试、项目部署、项目文档。
  - 在开始工作前，先阅读docs/GUIDE.md，了解新功能指南。
  - 在开始工作前，先阅读docs/TODO.md，了解待办事项，包括待办、进行中、已完成。
  - 在开始工作前，先阅读docs/FAQ.md，了解常见问题与解决方案，包括问题、解决方案、所属业务或模块。
  - 在开始工作前，先阅读docs/API.md，了解API 接口文档，包括请求参数、响应参数、请求示例、响应示例、所属业务或模块。
  - 在开始工作前，先阅读docs/CHANGELOG.md，了解更新日志，包括版本号、更新内容、所属业务或模块。
  - 在开始工作前，先阅读docs/DOCUMENTATION_STANDARDS.md，了解文档书写规范。
  - 在开始工作前，先阐述你的思路，并给出你的行动计划，得到我的认可后，再开始工作，除非我授权你无需询问我的意见。


- 文档定义：
  - docs/README.md：项目概览，包括项目简介、项目结构、项目依赖、项目配置、项目运行、项目测试、项目部署、项目文档
  - docs/GUIDE.md：新功能指南
  - docs/TODO.md：待办事项，包括待办、进行中、已完成
  - docs/FAQ.md：常见问题与解决方案，包括问题、解决方案、所属业务或模块
  - docs/API.md：API 接口文档，包括请求参数、响应参数、请求示例、响应示例、所属业务或模块
  - docs/CHANGELOG.md：更新日志，包括版本号、更新内容、所属业务或模块
  - docs/DOCUMENTATION_STANDARDS.md：文档书写规范
  - docs/KNOWLEDGE_BASE.md：知识库，包括知识、所属业务或模块
  

- 文档规范：
  - 若已有类似条目，请修改原条目，而并非新增条目
  - 新功能指南更新至 docs/GUIDE.md；新功能涉及的技术概念更新到docs/KNOWLEDGE_BASE.md
  - 新的待办整理到 docs/TODO.md；
  - 已完成的待办及时更新状态到docs/TODO.md；
  - 不随意新增新的文档，可以以新增条目的方式尽可能归纳到现有文档体系中。
  - Markdown 使用：仅在必要处使用；文件/目录/函数/类名用反引号格式化；代码片段使用合适语言标注的代码块；
    避免整段全文包裹在同一代码块。
  - 一次性的测试文件，应该在开发或debug完成之后归纳到tests/ 目录相应子目录中

- 终端命令规范（Windows 环境）：
  - 使用绝对路径执行脚本或切换目录。
  - 尽量避免使用无法交互的命令终端（例如 python 交互式 shell）；为可能交互的命令添加非交互参数。
  - 命令示例默认以 Git Bash 语法给出；优先使用路径：C:\\LAYNESOFTWARE\\Git\\bin\\bash.exe。

- 开发与变更规范：
  - 如果要修改数据库设计，先做好数据库备份，按照日期格式后缀备份。
  - 以不影响已实现功能为前提，遵循小步迭代与最小化变更原则；必要时采用增量提交和特性分支。
  - 变更前先理解现有代码与依赖，避免盲目试错式改动
  - 涉及导入新的依赖包，及时更新到requirements.txt
  - 开发或者变更完成，应该自主运行测试体系，比如单元测试和回归测试，确保功能正常，并且不影响原有功能，再给我反馈

- 测试规范：
  - 利用数据工厂，整理测试数据，并保存到tests/data/ 目录相应子目录中
  - 修复 Bug 或新增功能必须配套单元测试与集成测试，遵循“修复 → 测试 → 验证”的流程。
  - 所有测试用例放入 tests/ 目录相应子目录中，测试执行后需保留测试用例。

- Debug规范：
  - 排查过程中应充分了解现有逻辑、数据库等实际数据来证明你的假设，而不是拍脑袋式尝试。
  - 先建立明确的排查步骤与目标，逐步验证假设；补充必要日志以支撑定位；避免拍脑袋式尝试。
  - debug过程中尽量别动原有正常逻辑代码，如果改动了之后还是无法定位问题，应该恢复原来代码并从另一个角度排查，
    避免引入新的问题。
  - 每次修复Bug，需要根据bug所属业务或模块在docs/FAQ.md对应的目录中记录问题与最终解决方案，沉淀经验。
  - 修复完成时，应该自主执行测试用例，以及回归测试，确保没有问题后，再给我反馈

- 目录边界与审慎变更：
  - 允许变更：测试代码、与当前任务直接相关的配置。
  - 谨慎变更：原有业务代码，部署脚本、CI/CD 配置、K8s 清单等基础设施文件；如需修改，先评估影响并补充相应测试与回滚方案。

- 终端与服务管理：
  - 不自动启动前端服务；如需启动，由开发者手动控制本地进程。

- 提交信息规范：
  - 使用清晰的提交类型前缀（如 feat/fix/docs/test/chore/refactor）。
  - 提交信息简要概述变更目的与影响，必要时附带范围说明。

- 回答期望：
  - 遵循本规则生成建议、代码与命令；在存在多种可选方案时，优先选择影响面小、风险低且易于回滚的方案。