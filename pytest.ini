[tool:pytest]
# pytest配置文件

# Django项目设置
DJANGO_SETTINGS_MODULE = tests.test_settings
pythonpath = backend

# 测试发现
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# 命令行选项
addopts = 
    -v
    --tb=short
    --strict-markers
    --disable-warnings
    --html=tests/reports/html/pytest_report.html
    --json=tests/reports/json/pytest_report.json
    --self-contained-html

# 标记定义
markers =
    slow: 慢速测试
    unit: 单元测试
    integration: 集成测试
    api: API测试
    frontend: 前端测试
    regression: 回归测试
    new_feature: 新功能测试
    skip_if_no_database: 如果没有数据库则跳过
    skip_if_no_external_api: 如果没有外部API则跳过

# 过滤警告
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning

# 最小版本要求
minversion = 6.0

# 测试超时设置（秒）
timeout = 300


# Django项目设置
DJANGO_SETTINGS_MODULE = tests.test_settings
pythonpath = backend

# 测试发现
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# 命令行选项
addopts = 
    -v
    --tb=short
    --strict-markers
    --disable-warnings
    --html=tests/reports/html/pytest_report.html
    --json=tests/reports/json/pytest_report.json
    --self-contained-html

# 标记定义
markers =
    slow: 慢速测试
    unit: 单元测试
    integration: 集成测试
    api: API测试
    frontend: 前端测试
    regression: 回归测试
    new_feature: 新功能测试
    skip_if_no_database: 如果没有数据库则跳过
    skip_if_no_external_api: 如果没有外部API则跳过

# 过滤警告
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning

# 最小版本要求
minversion = 6.0

# 测试超时设置（秒）
timeout = 300
