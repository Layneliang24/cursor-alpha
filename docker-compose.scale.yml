services:
  # MySQL数据库 - 降低资源限制适配小内存服务器
  mysql:
    image: mysql:8.0
    container_name: alpha_mysql_scale
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./mysql/conf.d:/etc/mysql/conf.d
    expose:
      - "3306"
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --innodb-buffer-pool-size=256M --max-connections=100
    networks:
      - alpha_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Django后端 - 单实例部署，降低资源限制
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    environment:
      - DB_HOST=mysql
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DEBUG=False
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
    volumes:
      - ./backend/media:/app/media
      - ./backend/static:/app/static
      - ./logs:/app/logs
    expose:
      - "8000"
    depends_on:
      - mysql
    networks:
      - alpha_network
    command: >
      sh -c "python manage.py wait_for_db &&
      python manage.py migrate &&
      python manage.py collectstatic --noinput &&
      python -c \"import os; import django; django.setup(); from django.contrib.auth import get_user_model; u=os.getenv('DJANGO_SUPERUSER_USERNAME'); e=os.getenv('DJANGO_SUPERUSER_EMAIL') or ''; p=os.getenv('DJANGO_SUPERUSER_PASSWORD'); U=get_user_model() if u and p else None; exists=U.objects.filter(username=u).exists() if U else True; print('superuser exists' if exists else 'creating superuser'); U.objects.create_superuser(u,e,p) if U and not exists else None\" &&
      gunicorn --bind 0.0.0.0:8000 --workers 2 --timeout 120 --max-requests 500 --max-requests-jitter 50 alpha.wsgi:application"
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Nginx负载均衡器
  nginx:
    image: nginx:alpine
    container_name: alpha_nginx_scale
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
    networks:
      - alpha_network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'

  # Redis缓存（降低内存限制）
  redis:
    image: redis:7-alpine
    container_name: alpha_redis_scale
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 64mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - alpha_network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'

  # Vue.js前端 - 单实例部署
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    expose:
      - "80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
    networks:
      - alpha_network
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 128M
          cpus: '0.25'

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  alpha_network:
    driver: bridge
